#!/usr/bin/env bash
# This script sets up a pre-commit hook to keep the development log
# and pythonic dependencies up-to-date

# check for various dependency executables
test_pipreqs=$(command -v pipreqs)
test_poetry=$(command -v poetry)
test_shfmt=$(command -v shfmt)

# check if develop.org has been staged for commit
develop_change=$(
  git diff --cached --exit-code ./docs/develop.org \
    >/dev/null
  echo $?
)

# check which shell scripts have been staged for commit
scripts_change=($(git diff --name-only --cached ./scripts/))

# update requirements.txt given conditions
if [ -f "./poetry.lock" ] && [ -n "$test_poetry" ]; then
  printf "%s\n" "Syncing python dependencies with poetry"
  poetry export -f requirements.txt --without-hashes -o requirements.txt
  git add "requirements.txt"
elif [ ! -f "./poetry.lock" ] && [ -n "$test_pipreqs" ]; then
  printf "%s\n" "Syncing python dependencies with pipreqs"
  pipreqs --force .
  git add "requirements.txt"
fi

# update develop.md given conditions
if [ -f ./docs/develop.org ] && [ "$develop_change" -eq "1" ]; then
  printf "%s\n" "Syncing develop.md with develop.org"
  # convert todos.org to todos.md
  pandoc -f org -t markdown -o ./docs/develop.md ./docs/develop.org
  # replace TODOs cleanly
  sed -i 's/\[TODO\]{.*}/**TODO**/g' ./docs/develop.md
  sed -i 's/\[DONE\]{.*}/**DONE**/g' ./docs/develop.md
  # add requirements.txt to stage for commit
  git add ./docs/develop.md
fi

# format staged shell scripts
if [ -n "$test_shfmt" ] && [ "${#scripts_change[@]}" -ne "0" ]; then
  printf "%s\n" "Formatting shell scripts"
  shfmt -w -i 2 "${scripts_change[@]}"
  git add "${scripts_change[@]}"
fi
