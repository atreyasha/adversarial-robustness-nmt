*** Development

- get rid of test 1,0 predictions (done, check later)
- add training end proper checkpoint (done, check later)

- add unix time epoched filenames -> make naming semantic which will also help for continue training
- test out script and continue script for 1 epoch with bert on jarvis

- increase batch sizes to fit into GPU memory and for best efficiency
- remove xlm model implementations where possible -> use only bert and xlm-r
- use fp16 for slurm-s3it implementation

**** Clean-code and documentation
***** TODO improve training regime with more sensible logging styles -> do this later after main clean-up
***** TODO filter out dependencies to ones that are relevant in code -> add those to poetry
***** TODO clean up readme and all afterwards -> make scripts/side repos pretty where possible -> change xtreme-pawsx readmes/descriptions to make it all simpler -> ensure all data is now present
***** TODO figure out effecient handling of submodule and related processes -> add extra script to sync submodule and symlink executables to relevant locations, add extra script for preprocessing paws-x data in appropriate manner -> figure out how to tie this whole thing together

***** create discrete scripts -> train translation model, fine tune paraphrase detector, translate sentences, evaluate (bleu, chrf, fine-tuned model), visualize data
***** add instructions for syncing xtreme forked submodule and how the whole process should work
***** make separate readmes depending on if user wants to use or train, add separate instructions for different branches
***** consider building readme and project using python -m framework
***** provide all trained models for later reference -> and/or provide full random seeds for generation
***** add citations in readme as per general standard

**** Paraphrase detection
***** TODO Increase sequence lengths during training to accomodate for longer paraphrases, compute average seq lengths of wmt inputs to estimate model seq lengths for training paraphrase detector, work on keeping code simple
***** add additional step to evaluate using f1
***** Fine-tuning using modified xtreme workflow
****** fine-tune models with English and ensure no or little machine translated data is present in training set
****** refactor and improve xtreme code with simpler repository:
******* modify logging of models, combination of languages, correct naming of training parameters and files, add better metrics for monitoring performance like F1
******* train more model combinations, change evaluation metrics on test set to only be at the end, continue training for existing models or re-evaluate them on the test dataset, make new model which learns from all data instead of just one language, remove constant re-writing of caches, add more information into each log file to make it unique
******* add clean prediction workflow for translated data
****** run and document multiple models -> such as fine-tuned multilingual BERT and others
****** better to work with human-curated data than back-translated ones due to many errors -> advantage in PAWS and PAWS-X English data + WMT19 AR paraphrases
***** fix and refine paws-x pipeline later on with patience, typing and documentation if possible, keep simple as of now

**** Translation
***** TODO think about checkpoint averaging and how this would also ultimately work
***** TODO think of post-processing scripts needed for final checkpoints, conversion to csv etc.
***** TODO during use in translate script, load model manually with specified checkpoint, moses tokenizer, fastbpe and bpe.32000 file
***** TODO split output sentences by single space and then do moses detokenization to get back most ordered output for reading/comparison
***** TODO fix up model typing for translation functions, try to use fairseq transformer class instead of Any
***** train additional large model on wmt19 non-backtranslated data without backtranslation and similar transformer arch as fair paper, see how that works, do this after building all the other pipelines since this should be quick task given that translation code is mostly working
***** use strong and weak model for translation -> strong model being WMT19 single and ensemble with back translation (which adds robustness), while weak model being transformer trained on WMT16 without back translation -> compare general bleu scores
***** add easy and meaningful workflow for this directly into repository
***** consider also looking into extra references repo "evaluation-of-nmt-bt"

**** Evaluation and visualization
***** run bleu and chrF comparisons on sources and targets for nice plots 
***** need to think of effective ways of converting tensorflow event logs to csv's for nicer plotting -> look into event log combination workflow
***** run paraphrase detection only in cases where initial German paraphrase is positively detected, to ensure some consistency for evaluation -> maybe there might be an interesting correlation between XLM-R prediction and chrF scores
***** in rare cases, can do manual analysis and include this inside report
***** report evaluation of fine-tuning paraphrase detector and weaker translation model -> get enough well-structured data for ultimate plotting
***** early conclusions/hypothese: hand-crafted adversarial paraphrase robustness is handled well in SOTA models due to backtranslation reguralization, main vulnerability will be targetted adversarial samples

**** Paper
***** use two-column format for final paper, to prepare for paper writing
***** describe processes that worked and did not work -> talk about all the hurdles and show some bad examples when they occurred -> summarized below in logs
***** list hypotheses and how some were refuted by results
***** include semantic transferance equation in paper to introduce some formalisms

*** Completed
***** DONE consider making separate branch with sbatch parameters all present in files as necessary for reproducibility
      CLOSED: [2020-07-09 Thu 16:30]
***** DONE bug in XLM-R as it does not appear to learn -> look through code
      CLOSED: [2020-06-17 Wed 16:47]
***** DONE multilingual BERT with de only -> bug in how test scripts are saved leads to wrong results
      CLOSED: [2020-06-17 Wed 16:48]
***** DONE maybe consider using German BERT for doing this task explicitly for German, for our end task -> German BERT and RoBERTa for English to focus on exact task -> perhaps just use xtreme repo and keep only paws-x task -> clean up code and workflow for it -> error might be arising due to gradient clipping for very large model
      CLOSED: [2020-06-17 Wed 16:48]
***** DONE look into ParaBank2 and universal decompositional semantics -> not great paraphrases, no human curation
      CLOSED: [2020-06-05 Fri 14:28]
***** DONE look into Duolingo dataset for paraphrases -> no German target side
      CLOSED: [2020-06-05 Fri 13:56]
***** DONE add symbols for defaults in metavar default formatter, maybe add some other formatting tricks such as indents for defaults
      CLOSED: [2020-06-02 Tue 17:55]
***** DONE try installing java locally instead of root, if stanford parser is indeed necessary
      CLOSED: [2020-05-29 Fri 15:23]
***** DONE paraphrasing with SGCP -> very bad results on both original test and WMT data -> very sensitive to exemplar
      CLOSED: [2020-05-28 Thu 18:14]
***** DONE embed and cluser using universal sentence encoder (eg. BERT or LASER) -> use separate clusters for exemplar utility, make diverse collection and evaluate using metric or other NN
      CLOSED: [2020-05-28 Thu 17:52]
***** DONE find other sentence with maximum similarity and use that as exemplar, useparaphrase of best as exemplar, use pos-tags of sentence
      CLOSED: [2020-05-28 Thu 17:52]
***** DONE convert wmt datasets with derived exemplars into format pipe-able into SGCP -> needed before paraphrasing
      CLOSED: [2020-05-28 Thu 17:52]
***** DONE add workflow to download laser models with python -m laserembeddings download-models
      CLOSED: [2020-05-28 Thu 17:49]
***** DONE set up WMT 17 dev/test data and basic repo
      CLOSED: [2020-04-29 Wed 15:57]
***** DONE convert all processes to makefile for ease
      CLOSED: [2020-05-04 Mon 15:31]
***** DONE set up data downloading for all wmt sets with SacreBLEU
      CLOSED: [2020-05-17 Sun 21:58]

*** Brainstorming and logs
**** LASER embeddings + dense layers
***** not very useful by itself, needs a larger token-touching model
***** models do not show generalization, ie. training loss decreases but development loss rises
***** need to access larger token-based models to leverage full power of NLP model

**** Semantic similarity metrics
***** multireference BLEU score, use multiple paraphrases and check for best BLEU score
***** perhaps modified BLEU, METEOR, CCG semantics lambda calculus
***** perhaps some combination of edit distance with wordnet metrics
***** or NN technique using sentence BERT and other encoders -> more quantitative and continuous, can apply Michel et al. 2019 techniques for robustness comparisons
***** semantic parsing to graph, role labelling, wordnet concepts connecting, framenet, frame semantic parsing, brown clusters, AMR parsing, IWCS workshop for discussions 

**** Paraphrase generation
***** Ideas for self-paraphrasing
****** consider logical model for paraphrases, active to passive syntaxes and other logical frameworks -> use dependency parse on manual examples and check for logical process to create meaningful permutations
****** permute-paraphrase using syntax-tree chunks and test paraphrses using a detect or LASER embeddings for agnosticism between source/target

***** Viable pre-developed dynamic paraphrase-generation frameworks
****** SOW-REAP [torch, python3, average-documented] -> generate paraphrases without exemplar sentence form, worth trying out -> still poor results and only SOW model appears to be robust
******* refactor/extract out SOW model, shorten pipeline in sow to reduce computation and make input simpler
******* make quick samples from SOW and hand-select good ones, test them manually on fairseq NMT system for en-de to probe robustness
******* fork sow repo and clean code, remove bugs and make better documented with dep tracking and clearer instructions
******* require nltk word tokenize before main processing

****** SGCP [torch, python3, well-documented] -> generate paraphrases given exemplar sentence form, limitation is that exemplar sentence is a hard dependency, poor performance and not very semantically sound paraphrases
******* ParaNMT is likely to be better than QQPos since latter was trained only on qns
******* BERT score, BERT, RoBERTa for detecting paraphrases and quality
******* hand-written exemplar for meaningful output
******* remove exemplar sentence and replace with syntax form
******* clustering is done by meaning and not syntax -> or try difference via standard parse -> or random
******* provision of syntax directly instead of exemplar sentence
******* fix bug in sgcp to write all outs on separate lines and to not compute any similarity
******* change k means to find best number of clusters
******* add various paraphrase generation styles for SGCP such as same cluster, other cluster and same as source
******* require nltk word tokenize before main processing
******* future-idea: end-to-end paraphrase generation with adversarial goal, but unrealistic given time-frame and support

***** Legacy frameworks
****** Pair-it [tensorflow, python3, poorly documented] -> has potential to work but requires major refactoring
****** SCPN [torch, python2.7, poorly documented] -> buggy, but some examples work

**** Data augmenttion
***** look into nli adversarial datasets -> Nevin and Aatlantise
***** either look for paraphrase source and target pair which are closest to gold ones and augment data with these -> is safer to train with and can possibly improve overall translation quality
***** otherwise, find paraphrase which is close on source side but problematic on target side and augment these with gold target -> acts as a regularizing anchor and possibly adds some stability
***** Zipf's law should apply to syntax chunks, bias might still be present
***** anchor might still be useful, look for similar syntax on the target side that can be substituted -> maybe some kind of imitation to make augmented pairs 
***** consider contributing paraphrases to data augmentation libraries from research
***** noise is not problematic since there is already noise present in normal training data
***** meaning preserving + adversarial outcome -> then useful
***** augmentation is important if adversarial attack is successful, maybe syntax real-life frequency has effect
      
